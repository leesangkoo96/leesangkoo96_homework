

  <Web & web Service>

 - Client - Server <-> P2P


 - Request -> Response 반복구조


 - 그 때 오가는 문서 HTML
 	
	=> HTML파일을 주고 받으면서 웹 브라우저를 통해 그 결과물을 우리가 보게됨.


 - WWW와 인터넷

 	=> www: 컴퓨터와 서버들이 얽히고 섥힌것을 World wide web 이라고 한다.

	=> 인터넷은 크롬이나 인터넷 익스플로어 같은 것이 아니다.

 - 웹 브라우저

	=> 웹서버에서 쌍방향 통신하는 HTML문서나 파일과 연동하고 출력하는 응용소프트웨어

 	=> 웹 브라우저는 request와 response 과정에서 우리가 알아보기 쉽게 파일을 보여주는 역할을 한다.


 < 웹 서버를 만드는 능력 >

  

 서버 컴퓨터

 - 빠른 컴퓨팅 능력

	=> 요청을 받고 처리해서 보내주기만 하면 되기 때문에 연산 능력만 좋으면 된다.


 - 24시간 켜져있다. (무한루프)
	
	=> 클라이언트가 언제 요청할지 모르기 때문에 항상 켜져있어야한다.


 - 냉각장치

	=> 24시간 계속 켜져 있다 보니 발열이 발생하기 때문에 그 열을 식혀주어야 한다.


 - 클라이언트 수 고려 

	=> 30명 정도 이용하는 서비스에 3000명을 수용할 정도의 서버는 너무 과하다.


 - 보안이 중요

 서버가 되기 위한 두 가지 방법


 1. 내 컴퓨터 = 서버 컴퓨터화 시키기 ( 프로그램을 이용 )

 => 웹 서버 SW : Apache, Microsoft IIS  등...


 2. 이 세상 어딘가의 서버 컴퓨터 빌리 ( 인터넷을 통해 )

 => 웹 호스팅 업체 : Cloud9, Grthub 등.. ( 멋사에서는 깃허브를 이용! )



 각 기 다른 장단점을 가짐

 - 로컬 환경 세팅 

	장점 

	=> 한 번 익히면 자유로운 개발 가능!
	

	단점 

	=> 설치가 다소 까다로움

	=> 추가적인 지식을 요구	

 - 웹 호스팅 업체를 이용 

	장점 
		
	=> 설치와 조작이 단순

	단점

	=> 과금 발생

	=> 개발에 있어 제약이 조금 있음

	=> 클라이언트 수를 고려하지 않아도 됨. 




  <HTML 1>

  html은 태그의 종류를 나열하듯 외우며 공부하지 말고 문법형식과 동작방식에 집중하는것이 더욱 효과가 높은 학습방법이다.
 
 <HTML 2>

 - HTML 작성 대원칙

 	=> html로 꾸미려 들지 말자

	=> html은 애초에 꾸미기 위한 도구가 아님! => 꾸미는 도구는 CSS 

 - HTML 코드

	. HTML임을 알려주는 태그

	<!DOCTYPE html>
	<html> 
		<head>
			<bdoy>

			</body>
		</head>	
	</html>

	. 직접 화면에 등장하진 않지만 이 문서를 설명하는 태그

	. 직접적으로 화면에 등장하는, 문서에서 보이는 태그

 	
	. <form> 태그는 사용자에게 정보를 입력받을 수 있다

	 => 속성 action을 통해 사용자가 입력한것을 전송할 대상에게 지정할 수 있다. ex): <form action = " 전송받을 대상 "> </form>




 <Github 의 3+1 기능>


 1. Code 저장 기능


 2. Undo 기능 -> 이전상태로 돌아가는 기능 제공


 3. 협엄기능


 + extra => Web hosting 기능 => 쉽고 무료임

 깃 => 혼자 작업하는 공간

 깃 허브 => 작업한것을 공유하는 공간


 1. git init => 관리할 프로젝트를 지정 => 처음에 한 번만 해주면됨

 2. git add => stage area에 올리기 위해

 3. git commit -m "message" => git commit만 해도 되지만 message를 안쓰면 찾기 힘들기 떄문에 message는 써주자

 4. git remote add [remote 이름] [repository 주소]

 5. git push [remote 이름] [branch 이름]

 

 git add

 git commit -m "message"

 git push [remote 이름] [branch 이름]







